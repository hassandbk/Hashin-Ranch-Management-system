package com.example.hashinfarm.presentationLayer.controllers.cattleManagement.centerRightControllers.cattleDetailsMoreButtonsControllers;

import com.example.hashinfarm.data.DAOs.BreedDAO;
import com.example.hashinfarm.utils.logging.AppLogger;
import com.example.hashinfarm.data.DTOs.records.Breed;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import org.jetbrains.annotations.NotNull;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

public class AddBreedController {

  @FXML private TableView<Breed> allBreedsTableView;

  @FXML private TextField breedNameTextField;

  @FXML private ComboBox<String> originComboBox;

  @FXML private CheckBox recognitionCheckBox;

  @FXML private TextArea commentsTextArea;

  @SuppressWarnings("unchecked") // Suppress the unchecked warning for generic array creation
  public void initialize() {
    // Initialize columns programmatically
    TableColumn<Breed, Integer> breedIdColumn = new TableColumn<>("Breed ID");
    breedIdColumn.setCellValueFactory(new PropertyValueFactory<>("breedId"));

    TableColumn<Breed, String> breedNameColumn = new TableColumn<>("Breed Name");
    breedNameColumn.setCellValueFactory(new PropertyValueFactory<>("breedName"));

    TableColumn<Breed, String> originColumn = new TableColumn<>("Origin");
    originColumn.setCellValueFactory(new PropertyValueFactory<>("origin"));

    TableColumn<Breed, Boolean> recognitionColumn = new TableColumn<>("Recognition");
    recognitionColumn.setCellValueFactory(new PropertyValueFactory<>("recognition"));

    TableColumn<Breed, String> commentsColumn = new TableColumn<>("Comments");
    commentsColumn.setCellValueFactory(new PropertyValueFactory<>("comments"));

    // Add columns to TableView
    allBreedsTableView
        .getColumns()
        .addAll(breedIdColumn, breedNameColumn, originColumn, recognitionColumn, commentsColumn);

    // Load breed data into TableView
    loadBreedData();

    // Populate the ComboBox with a list of countries
    populateOriginComboBox();
  }

  private void loadBreedData() {
    try {
      // Retrieve all breeds from the database
      List<Breed> breedList = BreedDAO.getAllBreeds();

      // Populate the TableView with the observable list
      allBreedsTableView.setItems(FXCollections.observableArrayList(breedList));
    } catch (SQLException e) {
      AppLogger.error("Failed to load breed data", e);
      // Handle database errors or show error message to the user (optional)
      handleError(); // You can define a method to handle and display the error to the user
    }
  }

  // Optional method to handle and display the error message to the user
  private void handleError() {
    // You can create a custom error message based on the exception details
    String errorMessage = "An error occurred while loading breed data.";
    // Show the error message to the user (e.g., using an Alert dialog)
    Alert alert = new Alert(Alert.AlertType.ERROR, errorMessage);
    alert.showAndWait();
  }

  private void populateOriginComboBox() {
    // Get a list of all countries using Locale
    String[] countries = Locale.getISOCountries();

    // Sort the array of country codes
    Arrays.sort(countries);

    // Create an observable list to hold the countries
    ObservableList<String> countryList = FXCollections.observableArrayList();

    // Populate the observable list with country names
    for (String countryCode : countries) {
      Locale locale = new Locale.Builder().setRegion(countryCode).build();
      countryList.add(locale.getDisplayCountry());
    }

    // Set the observable list as the items of the ComboBox
    originComboBox.setItems(countryList);
  }

  @FXML
  private void handleAddBreed() {
    String breedName = breedNameTextField.getText();
    String origin = originComboBox.getValue();
    boolean recognition = recognitionCheckBox.isSelected();
    String comments = commentsTextArea.getText();

    // Assuming the first parameter is BreedID, which is typically auto-generated by the database
    // Pass 0 as the BreedID since it's not known at this point
    Breed breed = new Breed(0, breedName, origin, recognition, comments);

    try {
      BreedDAO.insertBreed(breed);
      Alert alert = getAlert();
      alert.showAndWait();

    } catch (SQLException e) {
      AppLogger.error("Failed to add breed", e);
      // Handle database errors or show error message to the user (optional)
      handleAddError(); // You can define a method to handle and display the error to the user
    }
  }

  // Optional method to handle and display the error message to the user
  private void handleAddError() {
    // You can create a custom error message based on the exception details
    String errorMessage = "An error occurred while adding the breed.";
    // Show the error message to the user (e.g., using an Alert dialog)
    Alert alert = new Alert(Alert.AlertType.ERROR, errorMessage);
    alert.showAndWait();
  }

  private @NotNull Alert getAlert() {
    Alert alert = new Alert(Alert.AlertType.INFORMATION);
    alert.setTitle("Success");
    alert.setHeaderText(null);
    alert.setContentText("Breed added successfully!");

    // Add event handler to clear the form when "OK" is clicked
    alert.setOnCloseRequest(
        event -> {

          // Clear the form
          breedNameTextField.clear();
          originComboBox.getSelectionModel().clearSelection();
          recognitionCheckBox.setSelected(false);
          commentsTextArea.clear();

          // Refresh the breed data in the TableView
          loadBreedData();
        });
    return alert;
  }
}
